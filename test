

Nat = Data(Y) < Zero : () | Succ : Y > 
SNat = Record(X) { .head : Nat | .tail : X }

Rules ( main : Nat ) = {
        -  = fib .tail .tail .tail .tail .tail .tail .head
}

Rules ( zip : (Nat -> Nat) -> SNat -> SNat -> SNat ) = {
        - f x y .head = f (x .head) (y .head)
        - f x y .tail = zip f (x .tail) (y .tail)
}

Rules ( sum : Nat -> Nat -> Nat ) = {
        - x Zero ()   = x
	- x Succ y    = Succ (sum x y)
}

Rules ( fib : SNat ) = {
	- .head       = Zero ()
        - .tail .head = Succ (Zero ())
        - .tail .tail = zip sum fib (fib .tail)
}
